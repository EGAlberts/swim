[General]
num-rngs = 3
debug-on-errors = true


# save results in sqlite format
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
outputscalarmanager-class = "omnetpp::envir::SqliteOutputScalarManager"
outputvectormanager-class = "omnetpp::envir::SqliteOutputVectorManager"

# non-default statistics rercording
*.initialServers.param-record-as-scalar = true
*.maxServers.param-record-as-scalar = true
*.bootDelay.param-record-as-scalar = true
*.numberOfBrownoutLevels.param-record-as-scalar = true
*.evaluationPeriod.param-record-as-scalar = true
*.responseTimeThreshold.param-record-as-scalar = true
*.maxServiceRate.param-record-as-scalar = true

network = SWIM_SA
result-dir = ../../../results/SWIM_SA

# simulation input and duration
*.source.interArrivalsFile = ${trace = "traces/wc_day53-r0-105m-l70.delta"}
sim-time-limit = 6300s
warmup-period = 600s

# adaptation loop period
*.evaluationPeriod = 60

# adaptation manager params
*.numberOfBrownoutLevels = 5
*.dimmerMargin = 0.1
*.responseTimeThreshold = 0.75s

# server pool configuration
*.maxServers = 3
*.initialServers = 1

# server config
**.server*.server.threads = 100
**.server*.server.brownoutFactor = 0.0
**.server*.server.timeout = 10s

# for plotting, use latency as iteration variable even if no iteration is needed
*.bootDelay = 0 # deterministic boot times
#*.bootDelay = truncnormal( ${latency = 0, 60, 120, 180, 240}, ${stddev=($latency)/10} ) # random boot times

# service time configuration
**.server*.server.serviceTime = truncnormal(0.030s,0.030s)
**.server*.server.lowFidelityServiceTime = truncnormal(0.001s,0.001s)

# this is used for the SEAMS'17 CobRA-PLA utility function
*.maxServiceRate = 1 / 0.04452713 # typically the inverse of the normal service time


[Config Reactive]
*.adaptationManagerType = "ReactiveAdaptationManager"
repeat = 30

[Config Reactive2]
*.adaptationManagerType = "ReactiveAdaptationManager2"

[Config Python]
*.adaptationManagerType = "PythonAdaptationManager"
*.experimentID = "E1"
repeat = 30

[Config pyUCBAO]
extends = Python
*.banditAlgorithmName = "UCB"
*.banditFormulaType = "formula: AO" #asymptotically optimal 

[Config pyUCBFH]
extends = Python
*.banditAlgorithmName = "UCB"
*.banditFormulaType = "formula: FH"

[Config pyUCBOG]
extends = Python
*.banditAlgorithmName = "UCB"
*.banditFormulaType = "formula: OG"

[Config pyUCBIM]
extends = Python
*.banditAlgorithmName = "UCBImproved"
*.banditFormulaType = "horizon: 250"

[Config pyUCBTN]
extends = Python
*.banditAlgorithmName = "UCB"
*.banditFormulaType = "formula: TN" #fixed horizon 

[Config pyEXP3FH]
extends = Python
*.banditAlgorithmName = "EXP3"
*.banditFormulaType = "horizon: 333"

[Config pyEXP4]
extends = Python
*.banditAlgorithmName = "EXP4"
*.banditFormulaType = "num_experts: 2, expert: EXP3, eta: 0.80"

[Config pySWUCB]
extends = Python
*.banditAlgorithmName = "SWUCB"
*.banditFormulaType = "look_back: 70"

[Config pyDUCB]
extends = Python
*.banditAlgorithmName = "DUCB"
*.banditFormulaType = "gamma: 0.997"

[Config pyEGreedy]
extends = Python
*.banditAlgorithmName = "egreedy"
*.banditFormulaType = "epsilon: 1.0"
repeat = 30

[Config pyRandom]
extends = Python
*.banditAlgorithmName = "egreedy"
*.banditFormulaType = "epsilon: 1.1"
repeat = 30

[Config pyEwS]
extends = Python
*.banditAlgorithmName = "EwS"
*.banditFormulaType = "" #n/a

[Config pyEXP3S]
extends = Python
*.banditAlgorithmName = "EXP3S"
*.banditFormulaType = "horizon: 333"

[Config Dummy]
*.adaptationManagerType = "DummyAdaptationManager"
repeat = 30
